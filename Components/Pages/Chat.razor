@page "/chat"
@rendermode InteractiveServer
@using GroqApiLibrary;
@using System.Text.Json.Nodes;
@inject IJSRuntime JSRuntime

<PageTitle>AI assistant</PageTitle>
<h1 style="text-align: center;">Chat</h1>

@foreach (var message in messages)
{
    @if (message.Role == "Użytkownik")
    {
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person" viewBox="0 0 16 16">
            <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6m2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0m4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4m-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10s-3.516.68-4.168 1.332c-.678.678-.83 1.418-.832 1.664z"/>
        </svg><strong> @message.Role</strong>
        <div class="alert alert-primary">@((MarkupString)FormatMessage(message.Message))</div>
    }
    else {
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chat-dots" viewBox="0 0 16 16">
            <path d="M5 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0m4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2"/>
            <path d="m2.165 15.803.02-.004c1.83-.363 2.948-.842 3.468-1.105A9 9 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.4 10.4 0 0 1-.524 2.318l-.003.011a11 11 0 0 1-.244.637c-.079.186.074.394.273.362a22 22 0 0 0 .693-.125m.8-3.108a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6-3.004 6-7 6a8 8 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a11 11 0 0 0 .398-2"/>
        </svg><strong> @message.Role</strong>
        <div class="alert alert-success">@((MarkupString)FormatMessage(message.Message))</div>
    }
}

<input class="form-control" placeholder="Napisz wiadomość" @bind="newMessage" />
<br>
<button class="btn btn-primary" type="button" @onclick="AskChat">Zapytaj Chat</button>

@code{
    private List<ChatMessage> messages = new();
    private string? newMessage;
    private string? newPrompt;
    private static string apiKey = "__GROK_API_KEY___";
    private GroqApiClient groqApi = new GroqApiClient(apiKey);
    private bool shouldHighlight = false;

    private async Task AskChat()
    {
        newPrompt = newMessage;
        if (messages != null)
        {
            newPrompt = "Here is our conversation history: ";
            foreach (var message in messages)
            {
                newPrompt += $"{message.Role}: {message.Message} ";
            }

            newPrompt += " Now I will send you a question. Answer for that question. " + newMessage;
        }

        var request = new JsonObject
        {
            ["model"] = "llama-3.2-3b-preview",
            ["messages"] = new JsonArray
            {
                new JsonObject
                {
                    ["role"] = "user",
                    ["content"] = newPrompt
                }
            }
        };

        var result = await groqApi.CreateChatCompletionAsync(request);
        var fullAnswer = result?["choices"]?[0]?["message"]?["content"]?.ToString();

        messages.Add(new ChatMessage { Message = newMessage, Role = "Użytkownik" });
        messages.Add(new ChatMessage { Message = fullAnswer, Role = "Chat" });

        newMessage = string.Empty;

        shouldHighlight = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldHighlight)
        {
            await JSRuntime.InvokeVoidAsync("hljs.highlightAll");
            shouldHighlight = false;
        }
    }

    private string FormatMessage(string? message)
    {
        if (string.IsNullOrEmpty(message)) return string.Empty;

        // Wykrywanie kodu otoczonego ```
        var formattedMessage = System.Text.RegularExpressions.Regex.Replace(
            message,
            "```(.*?)```",
            match => $"<pre><code>{System.Net.WebUtility.HtmlEncode(match.Groups[1].Value)}</code></pre>",
            System.Text.RegularExpressions.RegexOptions.Singleline
        );

        return formattedMessage;
    }
}
